<!DOCTYPE html>
<html>
<head>
<title>.+.</title>
</head>
<script>
function proyeccion1(p3,v){
// p3:pto3D , v:vista
	let x=p3[0];
	let y=p3[1];
	let z=p3[2];
	let xp,yp;
	// proyeccion con tres ejes
	if (v=='xyz'){
		xp=0.707106781*(x-y);
		yp=-(0.816496581*z-0.40824829*(x+y)); // para canvas -y es arriba 
	}
	// simplificaciones a dos ejes
	if (v=='yz'){ // alzado
		xp=-y;
		yp=-z;					
	}				
	if (v=='xz'){ // planta
		xp=x;
		yp=-z;				
	}
	if (v=='xy'){ // perfil
		xp=x;
		yp=y;
	}
	return [cReal(xp),cReal(yp)];
}
/*
function render(p,v){
// paso puntos 3D a 2D mantengo comandos
	let pry=[];	
	for (let item of p){	
		// item son comandos de dibujo
		if (!Array.isArray(item[0])){
			pry.push(item);
			continue;
		}
		// item son puntos3D
		let ptoItem=[];
		for (let punto of item){ 
			ptoItem.push(proyeccion1(punto,v));
		}	
		pry.push(ptoItem);		
	}
	return pry;
}
*/
function cReal(x){
// usamos numeros reales a dos decimales suficiente para los calculos
	return Number(x.toFixed(5));
}
function ajustarEscalaCentro(cx,cy,pnts,v){
// busco puntos maximos y minimos para calcular escala
// recorrer todos los puntos, entran en 3d con los comandos
	let xmax=-Infinity;
	let xmin=Infinity;
	let ymax=-Infinity;
	let ymin=Infinity;
	for (let item of pnts){ // [[p1],[p2]]
		if (!Array.isArray(item[0])){continue}// saltar comandos
		for (let p of item){
			p=proyeccion1(p,v);
			if (p[0]>xmax){xmax=p[0]}
			if (p[0]<xmin){xmin=p[0]}
			if (p[1]>ymax){ymax=p[1]}
			if (p[1]<ymin){ymin=p[1]}	
		}
	}
	let dx=xmax-xmin;
	let dy=ymax-ymin;
	let zx=cReal(cx/dx);
	let zy=cReal(cy/dy);
	let zoom=zy;
	if (zx<zy){zoom=zx}
	let margen=1.4; // padding
	zoom=cReal(zoom/margen); // recorte 20%
	// calculo del centro
	let xi=cReal((cx/2)-zoom*(xmin+dx/2));
	let yi=cReal((cy/2)-zoom*(ymin+dy/2));
	return [zoom,xi,yi];
}

function dibuja(pnts, v, id, flags, titulo) {
    // Dibuja en canvas dados pnts: puntos 3d, v: vista, flags: , titulo: para el contenedor canvas
    let textos = [];
    var c = document.getElementById(id);
    let r = ajustarEscalaCentro(c.width, c.height, pnts, v);
    let zoom = r[0];
    let xi = r[1];
    let yi = r[2];
    var x2 = 0, y2 = 0; // Último punto dibujado
    var ctx = c.getContext("2d");
    let f1 = 20;
    ctx.font = f1 + 'px Courier';
    ctx.beginPath();

    let vista = '';
    switch (id) {
        case 'cnt0':
            vista = 'Isométrica';
            break;
        case 'cnt1':
            vista = 'Alzado';
            break;
        case 'cnt2':
            vista = 'Perfil';
            break;
        case 'cnt':
            vista = 'Planta';
            break;
        default:
            vista = 'Desconocida';
    }

    if (titulo != '') {
        ctx.fillStyle = 'black'; 
        ctx.textAlign = 'center';
        ctx.fillText(`${titulo}`, c.width / 2 , f1); 
    }

    ctx.font = 24 + 'px Courier';
    for (k of pnts) {
        if (k[0] == 'relleno') {
            if (k[1] != undefined) {
                ctx.fillStyle = k[1];
            }
            continue;
        }
        if (k[0] == 'texto') {
            ctx.stroke();
            let f = flags[0]; // pintar o no
            if (f == 1) {
                ctx.fillText(k[1], x2, y2);
            }
            ctx.beginPath();
            continue;
        }
        if (k[0] == 'color') {
            ctx.stroke();
            ctx.strokeStyle = k[1];
            ctx.beginPath();
            continue;
        }
        if (k[0] == 'ancho') {
            ctx.stroke();
            ctx.lineWidth = parseInt(k[1]);
            ctx.beginPath();
            continue;
        }
        if (k.length == 2) { // Dos puntos es una línea
            let p1 = k[0];
            let p2 = k[1];
            p1 = proyeccion1(p1, v);
            p2 = proyeccion1(p2, v);
            let x1 = (xi + zoom * p1[0]);
            let y1 = (yi + zoom * p1[1]);
            x2 = (xi + zoom * p2[0]);
            y2 = (yi + zoom * p2[1]);
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            continue;
        }
        if (k.length > 2) { // Más de dos puntos es polígono
            poligono(ctx, k, v, xi, yi, zoom);
            continue;
        }
    }
    ctx.stroke();
}

function plantilla(color, id) {
    var c = document.getElementById(id);
    let cx = c.width;
    let cy = c.height;
    var ctx = c.getContext("2d");

    ctx.beginPath();
    ctx.strokeStyle = color;

    // Recuadro
    ctx.moveTo(0, 0);
    ctx.lineTo(cx, 0);
    ctx.lineTo(cx, cy);
    ctx.lineTo(0, cy);
    ctx.lineTo(0, 0);
    ctx.stroke();

    if (id == 'cnt0') {
        // Dibuja la rejilla 3D con rombos si es cnt0
        let lado = 20.2;  // Longitud de cada lado del rombo
        let filas = 30; // Número de filas
        let columnas = 20; // Número de columnas
        let desplazamientoX = -16.5; // Desplazamiento de la rejilla
        let desplazamientoY = 10.75; // Desplazamiento de la rejilla

        // Para cada posición de la cuadrícula, dibuja un rombo
        for (let i = 0; i < filas; i++) {
            for (let j = 0; j < columnas; j=j+1.73) {
                let x = j * lado * 2 - desplazamientoY; // Desplazamiento en el eje X (modificado por el lado)
                let y = i * lado * 2 + desplazamientoX;  // Desplazamiento en el eje Y (ajustado por desplazamiento)

                // Calculamos los vértices del rombo usando el lado
                let p1 = [x, y - lado];      // Vértice superior
                let p2 = [x + lado*1.73, y];      // Vértice derecho
                let p3 = [x, y + lado];      // Vértice inferior
                let p4 = [x - lado*1.73, y];      // Vértice izquierdo

                // Dibuja el rombo 
                ctx.moveTo(p1[0], p1[1]);
                ctx.lineTo(p2[0], p2[1]);
                ctx.lineTo(p3[0], p3[1]);
                ctx.lineTo(p4[0], p4[1]);
                ctx.lineTo(p1[0], p1[1]);  // Regresa al punto de inicio
            }
        }
    } else if (id != 'cnt0') {
        // Dibuja cuadrados si el id no es 'cnt0'
        let lado = 27;  // Lado del cuadrado (puedes ajustar este valor)
        let filas = 20;     // Número de filas
        let columnas = 15;  // Número de columnas
        let desplazamiento = -22;  // Desplazamiento vertical de la rejilla

        // Para cada posición de la cuadrícula, dibuja un cuadrado
        for (let i = 0; i < filas; i++) {
            for (let j = 0; j < columnas; j++) {
                let x = j * lado + desplazamiento;  // Desplazamiento en el eje X
                let y = i * lado + desplazamiento;  // Desplazamiento en el eje Y ajustado por desplazamiento

                // Dibuja el cuadrado
                ctx.moveTo(x, y);
                ctx.lineTo(x + lado, y);
                ctx.lineTo(x + lado, y + lado);
                ctx.lineTo(x, y + lado);
                ctx.lineTo(x, y);  // Regresa al punto de inicio
            }
        }
    }
    ctx.stroke();  // Traza todo lo dibujado
}


function crearContendor(a,b,id){
	let cx=a;
	let cy=b;
	var p1,p2;
	var ele=document.createElement('canvas');
	ele.id=id;
	ele.width=cx;
	ele.height=cy;
	ele.style.float='left';
	document.body.appendChild(ele);
	return ele;
}
function runVista(cx,cy,id,puntos3D,vista,flags,titulo){
	crearContendor(cx,cy,id);
	plantilla('grey',id);	
	dibuja(puntos3D,vista,id,flags,titulo);
}
function iniciar(){
/*
lista de puntos [[xyz][xyz]] y comandos
texto: posicionado despues del ultimo punto
color: lineas
relleno: color relleno y textos
lineas: [[xyz][xyz]] dos puntos
ancho: puntos del ancho de linea de dibujo
poligonos [[xyz][xyz][xyz]] mas de dos puntos
*/
	h1=[
	// los tres ejes
	['color','#333'],['relleno','#219A21'],
	[[0,0,0],[17,0,0]],['texto','X'],
	[[0,0,0],[0,17,0]],['texto','Y'],
	[[0,0,0],[0,0,17]],['texto','Z'],
	];
	h2=[
	// pieza 3D con poligonos rellenos
    //Cubo Rojo
	['relleno','#DC301A'],[[16,16,16],[0,16,16],[0,16,0],[16,16,0]],
    ['relleno','#DC301A'],[[16,16,16],[16,0,16],[16,0,0],[16,16,0]],  
    ['relleno','#DC301A'],[[16,16,16],[0,16,16],[0,0,16],[16,0,16]],
    //Etiquetas
    ['relleno','#EEEEEE'],[[16,16,11],[0,16,11],[0,16,5],[16,16,5]],
    ['relleno','#EEEEEE'],[[16,16,11],[16,0,11],[16,0,5],[16,16,5]],
    //Letras izquierda  
    ['relleno','#18163B'],[[2,16,10],[5,16,10],[5,16,9],[4,16,9],[4,16,6],[3,16,6],[3,16,9],[2,16,9]],
    ['relleno','#18163B'],[[6,16,10],[7,16,10],[7,16,9],[8,16,9],[8,16,8],[7,16,8],[7,16,6],[6,16,6]],
    ['relleno','#18163B'],[[10,16,6],[9,16,6],[9,16,7],[8,16,7],[8,16,8],[9,16,8],[9,16,10],[10,16,10]],
    ['relleno','#18163B'],[[11,16,10],[14,16,10],[14,16,9],[13,16,9],[13,16,6],[12,16,6],[12,16,9],[11,16,9]],
    //Letras derecha
    ['relleno','#18163B'],[[16,2,10],[16,5,10],[16,5,9],[16,4,9],[16,4,6],[16,3,6],[16,3,9],[16,2,9]],
    ['relleno','#18163B'],[[16,10,10],[16,9,10],[16,9,9],[16,8,9],[16,8,8],[16,9,8],[16,9,6],[16,10,6]],
    ['relleno','#18163B'],[[16,6,10],[16,7,10],[16,7,8],[16,8,8],[16,8,7],[16,7,7],[16,7,6],[16,6,6]],
    ['relleno','#18163B'],[[16,11,10],[16,14,10],[16,14,9],[16,13,9],[16,13,6],[16,12,6],[16,12,9],[16,11,9]],
    //Gris claro
    ['relleno','#D3D4DF'],[[15,15,16],[13,15,16],[13,13,16],[15,13,16]],
    ['relleno','#D3D4DF'],[[11,15,16],[9,15,16],[9,13,16],[11,13,16]],
    ['relleno','#D3D4DF'],[[7,15,16],[5,15,16],[5,13,16],[7,13,16]],
    ['relleno','#D3D4DF'],[[3,15,16],[1,15,16],[1,13,16],[3,13,16]],
    ['relleno','#D3D4DF'],[[15,11,16],[13,11,16],[13,9,16],[15,9,16]],
    ['relleno','#D3D4DF'],[[11,11,16],[9,11,16],[9,9,16],[11,9,16]],
    ['relleno','#D3D4DF'],[[7,11,16],[5,11,16],[5,9,16],[7,9,16]],
    ['relleno','#D3D4DF'],[[3,11,16],[1,11,16],[1,9,16],[3,9,16]],
    ['relleno','#D3D4DF'],[[15,7,16],[13,7,16],[13,5,16],[15,5,16]],
    ['relleno','#D3D4DF'],[[11,7,16],[9,7,16],[9,5,16],[11,5,16]],
    ['relleno','#D3D4DF'],[[7,7,16],[5,7,16],[5,5,16],[7,5,16]],
    ['relleno','#D3D4DF'],[[3,7,16],[1,7,16],[1,5,16],[3,5,16]],
    ['relleno','#D3D4DF'],[[15,3,16],[13,3,16],[13,1,16],[15,1,16]],
    ['relleno','#D3D4DF'],[[11,3,16],[9,3,16],[9,1,16],[11,1,16]],
    ['relleno','#D3D4DF'],[[7,3,16],[5,3,16],[5,1,16],[7,1,16]],
    ['relleno','#D3D4DF'],[[3,3,16],[1,3,16],[1,1,16],[3,1,16]],
    //Gris oscuro
    ['relleno','#606167'],[[14,14,16],[13,14,16],[13,13,16],[14,13,16]],
    ['relleno','#606167'],[[13,13,16],[12,13,16],[12,12,16],[13,12,16]],
    ['relleno','#606167'],[[10,14,16],[9,14,16],[9,12,16],[10,12,16]],
    ['relleno','#606167'],[[7,14,16],[6,14,16],[6,12,16],[7,12,16]],
    ['relleno','#606167'],[[3,14,16],[2,14,16],[2,13,16],[3,13,16]],
    ['relleno','#606167'],[[4,13,16],[3,13,16],[3,12,16],[4,12,16]],
    ['relleno','#606167'],[[14,10,16],[12,10,16],[12,9,16],[14,9,16]],
    ['relleno','#606167'],[[10,10,16],[9,10,16],[9,9,16],[10,9,16]],
    ['relleno','#606167'],[[7,10,16],[6,10,16],[6,9,16],[7,9,16]],
    ['relleno','#606167'],[[4,10,16],[2,10,16],[2,9,16],[4,9,16]],
    ['relleno','#606167'],[[14,7,16],[12,7,16],[12,6,16],[14,6,16]],
    ['relleno','#606167'],[[10,7,16],[9,7,16],[9,6,16],[10,6,16]],
    ['relleno','#606167'],[[7,7,16],[6,7,16],[6,6,16],[7,6,16]],
    ['relleno','#606167'],[[4,7,16],[2,7,16],[2,6,16],[4,6,16]],
    ['relleno','#606167'],[[14,3,16],[13,3,16],[13,2,16],[14,2,16]],
    ['relleno','#606167'],[[13,4,16],[12,4,16],[12,3,16],[13,3,16]],
    ['relleno','#606167'],[[10,4,16],[9,4,16],[9,2,16],[10,2,16]],
    ['relleno','#606167'],[[7,4,16],[6,4,16],[6,2,16],[7,2,16]],
    ['relleno','#606167'],[[3,3,16],[2,3,16],[2,2,16],[3,2,16]],
    ['relleno','#606167'],[[4,4,16],[3,4,16],[3,3,16],[4,3,16]],
    ['relleno','#606167'],[[9,9,16],[7,9,16],[7,7,16],[9,7,16]],
    //Mecha
    ['relleno','#222222'],[[11,10,16],[10,10,16],[10,11,16],[6,11,16],[6,10,16],[5,10,16],[5,6,16],[6,6,16],[6,5,16],[6,5,16],[10,5,16],[10,6,16],[11,6,16]],

	// pieza 3D con lineas
    ['relleno','##DC301A'],[[16,16,16],[0,16,16]],
    ['relleno','##DC301A'],[[16,16,16],[16,0,16]],
    ['relleno','##DC301A'],[[16,16,16],[16,16,0]],
	];
	let a=226; // ajuste a la ventana
	runVista(a*3,a*3,'cnt0',[].concat(h1,h2),'xyz',[1],'isométrica');
	runVista(a,a,'cnt1',h2,'yz',[0],'planta');
	runVista(a,a,'cnt2',h2,'xz',[0],'perfil');
	runVista(a,a,'cnt3',h2,'xy',[0],'alzado');
	// flasgs [texto] encienden o apagan elementos	
}
function poligono(ctx, k, v, xi, yi, zoom){
// usa esta funcion
			const rg=new Path2D(); // region
			for (let j=0;j<k.length;j++){
				let p=k[j];
				p=proyeccion1(p,v);
				let x=(xi+zoom*p[0]);
				let y=(yi+zoom*p[1]);
				if (j==0){
					rg.moveTo(x,y);					
				}else{
					rg.lineTo(x,y);					
				}
			}
			rg.closePath();
			ctx.fill(rg);	
}
window.onload=iniciar;
</script>
<body>
</body>
</html> 